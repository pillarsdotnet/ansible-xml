{#-
    validate: Output a value after formatting and type-validation.
    args:
      - key: (str) Name for the value to be validated; used in error
        messages.
      - value: (scalar) The value to be validated, formatted, and output.
      - validation: The data type and/or format. Can be any of the following:
        - A format string beginning with the `%` character.
        - A regexp beginning with `^` and ending with `$`.
        - bool: Convert to boolean and output 'True' or 'False'.
        - bool(yes,no): Output 'yes' if true; 'no' if false.
        - ipaddr: An (ipv4 or ipv6) ip address.
        - ipv4: An ipv4 address.
        - ipv6: An ipv6 address.
        - `none`: No validation; functionally equivalent to `'%s'`.
        - range(min,max,fmt): A scalar with allowed range and format.
        - strftime(fmt): A date with output format.
-#}
{%- macro validate(key, value, validation) -%}
{%-   if validation is string -%}
{%-     set valstr=value|pprint -%}
{%-     set msg=key+'='+valstr+' does not match '+validation -%}
{%-     if validation.0 == '%' -%}
{{        value|is_format(validation,msg) }}
{%-     elif validation.0 == '^' and validation[-1] == '$' -%}
{{        value|assert(regex_search(validation),msg) }}
{%-     elif validation[:4] == 'bool' -%}
{%-       set argstr=validation|regex_replace("(\(([^)]*)\))?","\2") -%}
{%-       set arglist=argstr.split(',') -%}
{{        value|ternary(arglist[0]|default('True'),arglist[1]|default('False')) }}
{%-     elif validation[:9] == 'ipaddr' -%}
{{        value|assert(value|ipaddr,msg) }}
{%-     elif validation[:4] == 'ipv4' -%}
{{        value|assert(value|ipv4,msg) }}
{%-     elif validation[:4] == 'ipv6' -%}
{{        value|assert(value|ipv6,msg) }}
{%-     elif validation[:5] == 'range' -%}
{%-       set argstr=validation|regex_replace("range(\(([^)]*)\))?","\2") -%}
{%-       set arglist=argstr.split(',') -%}
{%-       set testval=value|float -%}
{%-       if arglist[0]|length -%}
{%-         set minval=arglist[0]|float -%}
{%-         set test=value|assert(testval>=minval,'%s (<%s)'|format(msg,minval|string)) -%}
{%-       endif -%}
{%-       if arglist[1]|default('')|length -%}
{%          set maxval=arglist[1]|float -%}
{%-         set test=value|assert(testval<=maxval,'%s (>%s)'|format(msg,maxval|string)) -%}
{%-       endif -%}
{%-       if arglist[2]|default('')|length -%}
{{          testval|is_format(arglist[2]) }}
{%-       else -%}
{{          value }}
{%-       endif -%}
{%-     elif validation[:8] == 'strftime' -%}
{%-       set argstr=validation|regex_replace("strftime(\(([^)]*)\))?","\2") -%}
{{        value|is_datetime(argstr,msg) }}
{%-     endif -%}
{%-   elif validation is sequence -%}
{%-     set msg=key+'='+value+' is not one of: '+validation|join(', ') -%}
{{      value|assert(value in validation,msg) }}
{%-   else -%}
{%      set msg=key+' has unknown validation: '+validation|pprint -%}
{{      value|assert(validation is none,msg) }}
{%-   endif -%}
{%- endmacro -%}
{#-
    xml: Render xml with formatting and validation.
    args:
      - key: (str) The tag name to be rendered.
      - value: (dict|string) The tag attributes and/or content.
      - schema: (dict|scalar|none) Tag schema.
      - level: (int) Current tag nesting level.
      - spaces: (int) Number of spaces to indent for each level.
-#}
{%- macro xml(path, key, value, schema, level, spaces) -%}
{%-   set tag = namespace() -%}
{%-   set tag.empty = True -%}
{%-   set tag.key = [key] -%}
{%-   set tag.value = value -%}
{%-   if schema is mapping -%}
{%-     if tag.value is mapping -%}
{%-       for optkey, optval in schema|dictsort -%}
{%-         if tag.value[optkey] is defined -%}
{%-           if optkey.startswith('.') -%}
{%-             set value=validate(path+'/'+tag.key.0+optkey, tag.value[optkey], optval) -%}
{%-             set value=value|string|regex_replace('&','&amp;') -%}
{%-             set value=value|regex_replace('<','&lt;') -%}
{%-             set value=value|regex_replace('"','&quot;') -%}
{%-             set tag.key=tag.key|union([optkey[1:]+'="'+value+'"']) -%}
{%-           elif optkey == '_' -%}
{%-             set tag.value = tag.value._ -%}
{%-           else -%}
{%-             if tag.empty %}
{{                ' '*level*spaces }}<{{ tag.key|join(' ') }}>
{%-               set tag.empty=False -%}
{%-             endif -%}
{{              xml(path+'/'+key, optkey, tag.value[optkey], optval, level+1, spaces) }}
{%-           endif -%}
{%-         endif -%}
{%-       endfor -%}
{%      endif -%}
{%-     if tag.value is sequence and tag.value is not string -%}
{%-       for tagval in tag.value -%}
{{          xml(path, key, tagval, schema, level, spaces) }}
{%-       endfor -%}
{%-     else -%}
{%-       set schema=schema._|default('%s') -%}
{%-     endif -%}
{%-   endif -%}
{%-   if tag.value is string or tag.value is number -%}
{%-     set tag.value=validate(path+'/'+tag.key.0, tag.value, schema) -%}
{%-     set tag.value=tag.value|string|regex_replace('&','&amp;') -%}
{%-     set tag.value=tag.value|regex_replace('<','&lt;') %}
{{        ' '*level*spaces }}<{{ tag.key|join(' ') }}>{{ tag.value }}</{{ tag.key.0 }}>
{%-   elif tag.value is not sequence -%}
{%-     if tag.empty %}
{{        ' '*level*spaces }}<{{ tag.key|join(' ') }}/> }}
{%-     else -%}
{{        ' '*level*spaces }}</{{ tag.key.0 }}> }}
{%-     endif -%}
{%-   endif -%}
{%- endmacro -%}
{#-
    xml.j2: Template to render xml with formatting and type-validation.
    vars:
      value: (dict) Data to be rendered as xml.
      schema: (dict) The xml schema definition.
      spaces: (int) Indentation spaces per level.
-#}
{%- for tag,content in value|dictsort -%}
{{    xml('', tag, content, schema[tag], 0, spaces|default(2)) }}
{%- endfor -%}
